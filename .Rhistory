library(OptimalDesignMM)
help(package="OptimalDesignMM")
library(OptimalDesignMM)
help(package="OptimalDesignMM")
library(OptimalDesignMM)
help(package="OptimalDesignMM")
library(OptimalDesignMM)
help(package="OptimalDesignMM")
library(OptimalDesignMM)
trt <- 30
blocks <- 2; rb <- 5; cb <- 6; Tr <- 10; Tc <- 6
VarG <- 0.3; VarE <- 0.7; rhox <- 0.6; rhoy <- 0.6;
matdf <- rcbd(blocks,trt,rb,cb,Tr,Tc)
Rinv <- Rmatrix(matdf,VarE,rhox,rhoy)
library(OptimalDesignMM)
rm(list=ls())
library(OptimalDesignMM)
trt <- 30
blocks <- 2; rb <- 5; cb <- 6; Tr <- 10; Tc <- 6
VarG <- 0.3; VarE <- 0.7; rhox <- 0.6; rhoy <- 0.6;
matdf <- rcbd(blocks,trt,rb,cb,Tr,Tc)
Rinv <- Rmatrix(matdf,VarE,rhox,rhoy)
?warnings
library(OptimalDesignMM)
diag(5)
Diagonal(5)
mm = diag(4)
mm
drop0(mm)
library(OptimalDesignMM)
trt <- 30
blocks <- 2; rb <- 5; cb <- 6; Tr <- 10; Tc <- 6
VarG <- 0.3; VarE <- 0.7; rhox <- 0.6; rhoy <- 0.6;
matdf <- rcbd(blocks,trt,rb,cb,Tr,Tc)
Rinv <- Rmatrix(matdf,VarE,rhox,rhoy)
Ginv <- Gmatrix(trt,VarG)   # Independent random effects
resD <- VarCov.rcbd(matdf,criteria="A",Ginv,Rinv)  # K is not provided but calculated
resD$OptimScore
K <- resD$K
resD <- VarCov.rcbd(matdf,criteria="A",Ginv,Rinv,K) # K is provided
(InitScore<-resD$OptimScore)
(OldScore<-resD$OptimScore)
Oldmatdf<-matdf
print(OldScore)
iter<-2000
for (i in 1:iter) {
#newmatdf <- SwapMethods(matdf,pairs=2,swapmethod="within")
newmatdf <- SwapMethods(matdf,pairs=1,swapmethod="across")
#newmatdf <- SwapMethods(matdf,pairs=2,swapmethod="any")
NewScore <- VarCov.rcbd(newmatdf,criteria="A",Ginv,Rinv,K)$OptimScore # K is provided
if(NewScore < OldScore){
OldScore <- NewScore
matdf <- newmatdf
print(OldScore)
}
DesLayout(matdf,trt,cb,rb,blocks)  # Original one
DesLayout(Oldmatdf,trt,cb,rb,blocks)
library(OptimalDesignMM)
OptimizeRCBD <- function(matdf,iter=10,pairs=1,swapmethod="within",
criteria="A",Ginv=NULL,Rinv=NULL,K=NULL) {
for (i in 1:iter) {
newmatdf <- SwapMethods(matdf,pairs,swapmethod)
NewScore <- VarCov.rcbd(newmatdf,criteria,Ginv,Rinv,K)$OptimScore
if(NewScore < OldScore){
OldScore <- NewScore
matdf <- newmatdf
print(OldScore)
}
return(list(OptimScore=OldScore,newDesign=matdf))
}
trt <- 30
blocks <- 2; rb <- 5; cb <- 6; Tr <- 10; Tc <- 6
VarG <- 0.3; VarE <- 0.7; rhox <- 0.6; rhoy <- 0.6;
matdf <- rcbd(blocks,trt,rb,cb,Tr,Tc)
Rinv <- Rmatrix(matdf,VarE,rhox,rhoy)
Ginv <- Gmatrix(trt,VarG)   # Independent random effects
resD <- VarCov.rcbd(matdf,criteria="A",Ginv,Rinv)
# K is not provided but calculated
resD$OptimScore
K <- resD$K
resD <- VarCov.rcbd(matdf,criteria="A",Ginv,Rinv,K) # K is provided
resD$OptimScore
(InitScore<-resD$OptimScore)
(OldScore<-resD$OptimScore)
Oldmatdf<-matdf
print(OldScore)
iter<-100
OptimizeRCBD(matdf,iter,pairs=1,swapmethod="within",
criteria="A",Ginv,Rinv,K)
newD = OptimizeRCBD(matdf,iter,pairs=1,swapmethod="within",
criteria="A",Ginv,Rinv,K)
ls(newD)
DesLayout(newD$newDesign, trt, cb, rb, blocks)
DesLayout(Oldmatdf, trt, cb, rb, blocks)
library(OptimalDesignMM)
